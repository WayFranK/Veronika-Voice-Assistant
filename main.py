import datetime
import os
import random
import re
import webbrowser
from typing import Dict, List

import pyttsx3
import speech_recognition as sr
from colorama import Fore, Back, Style, init


class VeronicaAssistant:
    def __init__(self):
        init(autoreset=True)
        self.engine = self._setup_tts_engine()
        self.recognizer = sr.Recognizer()
        self.commands = self._load_commands()
        self.urls = self._load_urls()

    @staticmethod
    def _setup_tts_engine() -> pyttsx3.Engine:
        engine = pyttsx3.init()
        engine.setProperty('rate', 150)
        engine.setProperty('volume', 0.9)
        return engine

    def _load_urls(self) -> Dict[str, str | List[str]]:
        return {
            'twitch': 'https://www.twitch.tv',
            'my_twitch': 'https://www.twitch.tv/michal_ivanich',
            'vk_music': 'https://vk.com/music/playlist/-88066503_56557078',
            'music': [
                'https://www.youtube.com/watch?v=ca0775s0TxM',
                'https://www.youtube.com/watch?v=M5QY2_8704o',
                'https://www.youtube.com/watch?v=qwHyfcCvBFQ'
            ]
        }

    def _load_commands(self) -> Dict[str, str]:
        return {
            '–ø—Ä–∏–≤–µ—Ç': self._greet,
            '—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å': self._show_capabilities,
            '–æ—Ç–∫—Ä–æ–π google': lambda: self._open_url('https://google.com', 'Google'),
            '–æ—Ç–∫—Ä–æ–π youtube': lambda: self._open_url('https://youtube.com', 'YouTube'),
            '–∑–∞–ø—É—Å—Ç–∏ –º—É–∑—ã–∫—É': self._play_music,
            '–≤–∫ –º—É–∑—ã–∫–∞': lambda: self._open_url(self.urls['vk_music'], '–í–ö –ú—É–∑—ã–∫–∞'),
            'twitch': self._handle_twitch,
            '–ø–æ–∏—Å–∫': self._search_web,
            '–≤—Ä–µ–º—è': self._tell_time,
            '–∑–∞–∫—Ä–æ–π': self._close_application,
            '—à—É—Ç–∫–∞': self._tell_joke
        }

    def speak(self, text: str) -> None:
        cleaned_text = re.sub(r'[^\w\s,\.!?-]', '', text)
        self.engine.say(cleaned_text)
        self.engine.runAndWait()
        print(Fore.BLUE + f"–û—Ç–≤–µ—Ç: {text}")

    def listen_command(self) -> str:
        with sr.Microphone() as source:
            print(Fore.GREEN + "–°–ª—É—à–∞—é... üéß")
            self.recognizer.adjust_for_ambient_noise(source)
            
            try:
                audio = self.recognizer.listen(source, timeout=5, phrase_time_limit=8)
            except sr.WaitTimeoutError:
                self.speak("–ù–µ —É—Å–ª—ã—à–∞–ª–∞ –≤–∞—à –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üé§")
                return ""

        try:
            command = self.recognizer.recognize_google(audio, language="ru-RU").lower()
            print(Fore.YELLOW + f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {command} üó£Ô∏è")
            return command
        except sr.UnknownValueError:
            self.speak("–Ø –Ω–µ –ø–æ–Ω—è–ª–∞ –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. ü§î")
        except sr.RequestError as e:
            self.speak("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç. üåê")
            print(Fore.RED + f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {str(e)}")
        return ""

    def process_command(self, command: str) -> None:
        for key in self.commands:
            if key in command:
                self.commands[key](command)
                return
        
        self.speak("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É üòî")

    def _greet(self, _: str = "") -> None:
        self.speak("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å? ü§ñ")

    def _show_capabilities(self, _: str = "") -> None:
        self.speak("–Ø –º–æ–≥—É –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–∞–π—Ç—ã, –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≥–æ–≤–æ—Ä–∏—Ç—å –≤—Ä–µ–º—è –∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å —à—É—Ç–∫–∏! üòä")

    def _open_url(self, url: str, service_name: str) -> None:
        webbrowser.open(url)
        self.speak(f"–û—Ç–∫—Ä—ã–≤–∞—é {service_name} üåê")

    def _play_music(self, _: str = "") -> None:
        webbrowser.open(random.choice(self.urls['music']))
        self.speak("–í–∫–ª—é—á–∞—é –º—É–∑—ã–∫—É üé∂")

    def _handle_twitch(self, command: str) -> None:
        if '–∫–∞–Ω–∞–ª' in command:
            self._open_url(self.urls['my_twitch'], "–≤–∞—à Twitch")
        else:
            self._open_url(self.urls['twitch'], "Twitch")

    def _search_web(self, command: str) -> None:
        query = command.split('–ø–æ–∏—Å–∫', 1)[1].strip()
        webbrowser.open(f"https://google.com/search?q={query}")
        self.speak(f"–ò—â—É {query} üîç")

    def _tell_time(self, _: str = "") -> None:
        time = datetime.datetime.now().strftime("%H:%M")
        self.speak(f"–°–µ–π—á–∞—Å {time} ‚è∞")

    def _close_application(self, command: str) -> None:
        if '–±—Ä–∞—É–∑–µ—Ä' in command:
            os.system("taskkill /im chrome.exe /f")
            self.speak("–ó–∞–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä üñ•Ô∏è")
        else:
            self.speak("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è üòü")

    def _tell_joke(self, _: str = "") -> None:
        jokes = [
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ —Ö–æ–¥—è—Ç –≤ –ª–µ—Å? –ü–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤. üêû",
            "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç –æ–∫–µ–∞–Ω—ã? –°–∏. üåä",
            "–ü–æ—á–µ–º—É –ø–∏—Ç–æ–Ω—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É—Å—Ç–∞—é—Ç? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞—é—Ç—Å—è –≥–∏–±–∫–∏–º–∏. üêç",
            "–ü–æ—á–µ–º—É Java-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –≤—Å–µ–≥–¥–∞ –Ω–æ—Å—è—Ç –æ—á–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –Ω–µ –º–æ–≥—É—Ç C#. üëì",
            "–ß—Ç–æ –≥–æ–≤–æ—Ä—è—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–æ–≥–¥–∞ –∏—Ö –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç? –≠—Ç–æ –º–∞–≥–∏—è! ‚ú®"
        ]
        joke = random.choice(jokes)
        self.speak(joke)
        print(Fore.CYAN + f"–®—É—Ç–∫–∞: {joke} üòÑ")


if __name__ == "__main__":
    assistant = VeronicaAssistant()
    assistant.speak("–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –í–µ—Ä–æ–Ω–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
    print(Fore.CYAN + "–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –í–µ—Ä–æ–Ω–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    
    try:
        while True:
            command = assistant.listen_command()
            if command:
                assistant.process_command(command)
    except KeyboardInterrupt:
        assistant.speak("–í—ã–∫–ª—é—á–∞—é—Å—å! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
    except Exception as e:
        print(Fore.RED + f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        assistant.speak("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ! ‚ö†Ô∏è")